@startuml Die Controller Klasse

interface Promise<T>

package @nestjs/common {
  class "function Controller(): ClassDecorator" as Controller
  hide Controller circle

  class "function UseGuards(): ClassDecorator | MethodDecorator" as UseGuards
  hide UseGuards circle

  class "function UseInterceptors(): ClassDecorator | MethodDecorator" as UseInterceptors
  hide UseInterceptors circle

  class "function Get(): MethodDecorator" as Get
  hide Get circle

  class "function Post(): MethodDecorator" as Post
  hide Post circle

  class "function Put(): MethodDecorator" as Put
  hide Put circle

  class "function Delete(): MethodDecorator" as Delete
  hide Delete circle

  class "function Req(): ParameterDecorator" as Req
  hide Req circle

  class "function Res(): ParameterDecorator" as Res
  hide Res circle

  class "function Param(): ParameterDecorator" as Param
  hide Param circle

  class "function Query(): ParameterDecorator" as Query
  hide Query circle

  class "function Body(): ParameterDecorator" as Body
  hide Body circle

  class "function Headers(): ParameterDecorator" as Headers
  hide Headers circle

  Controller -[hidden]down-> UseGuards
  UseGuards -[hidden]down-> UseInterceptors
  UseInterceptors -[hidden]down-> Get
  Get -[hidden]down-> Post
  Post -[hidden]down-> Put
  Put -[hidden]down-> Delete
  Delete -[hidden]down-> Req
  Req -[hidden]down-> Res
  Res -[hidden]down-> Param
  Param -[hidden]down-> Query
  Query -[hidden]down-> Body
  Body -[hidden]down-> Headers
}

package security.auth {
    enum Role {
        ADMIN
        MITARBEITER
    }
    
    class "const Roles = (...roles: Role[]) => SetMetadata" as Roles
    hide Roles circle

    Roles ..> Role
}

package schuh #DDDDDD {
    package entity #FFFFFF {
        class Schuh <<entity>>
    }

    package service #FFFFFF {
        class SchuhService << control >>
    }

    SchuhQuery --> Schuh 

    SchuhController o-down-> "1" SchuhService: service
    SchuhController ..> Schuh

    SchuhController .up.> Controller
    SchuhController .up.> UseGuards
    SchuhController .up.> UseInterceptors
    SchuhController .up.> Get
    SchuhController .up.> Post
    SchuhController .up.> Put
    SchuhController .up.> Delete
    SchuhController .up.> Req
    SchuhController .up.> Res
    SchuhController .up.> Param
    SchuhController .up.> Query
    SchuhController .up.> Body
    SchuhController .up.> Headers

    SchuhController .up.> Roles
    SchuhController .up.> Role

    SchuhController ..> SchuhQuery

    SchuhController ..> Request
    SchuhController ..> Response
    SchuhController ..> Promise

    class SchuhController << control >> << @Controller() >> << @UseGuards() >> << @UseInterceptors() >> {
    + @Get async findById(@Param() id: string, @Req() req: Request, @Headers() version: string, @Res() res: Response): Promise<void>
    + @Get async find(@Query() query: BuchQuery, @Req() req: Request,  @Res() res: Response): Promise<void>
    + @Post @Roles() async create(@Body() buch: Buch, @Req() req: Request,  @Res() res: Response): Promise<void>
    + @Put @Roles() async update(@Body() buch: Buch, @Param() id: string, @Headers() version: string, @Res() res: Response): Promise<void>
    + @Delete @Roles() async delete(@Param() id: string, @Res() res: Response): Promise<void>
    }
}

hide empty members
footer (c) Jakob Krumke

@enduml